#!/usr/bin/env node
// Copyright (c) 2014 Quildreen Motta <quildreen@gmail.com>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var doc = [ 'jsm â€” A minimal multi-layered subset of JS for teaching.'
          , ''
          , 'Usage:'
          , '  jsm repl [options]              # An interactive session'
          , '  jsm run [options] <file>        # Runs a program'
          , '  jsm compile [options] <file>    # Compiles a file'
          , '  jsm exercise [options] <file>   # Runs the exercise <file>'
          , '  jsm languages                   # Lists available languages'
          , '  jsm help                        # Shows this screen'
          , '  jsm version                     # Shows version number'
          , ''
          , 'Options:'
          , '  -l, --language=FILE  Uses language definitions from FILE.'
          , '  -c, --compile        Compiles the file.'
          , '  -a, --ast            Displays a JSON of the AST of a program.'
          , '  -o, --output=FILE    Outputs to FILE instead of stdout.'
          , '  -j, --json           Outputs JS AST as JSON.'
          , '  --debug              Displays some debug information.'
          ].join('\n')


var fs        = require('fs')
var docopt    = require('docopt').docopt
var path      = require('path')
var curry     = require('core.lambda').curry
var ometa     = require('ometajs')
var vm        = require('vm')
var pkg       = require('../package.json')
var core      = require('../lib/core')
var languages = require('../lib/languages')
var exercises = require('../lib/exercises')

var keys = Object.keys
var show = console.log.bind(console)
var die  = process.exit.bind(process)

var root   = path.resolve('.')

function read(filename) {
  return fs.readFileSync(filename, 'utf-8')
}

write = curry(write, 2)
function write(filename, data) {
  return fs.writeFileSync(filename, data, 'utf-8')
}

function stripComments(doc) {
  return doc.replace(/\#.+/g, '')
}

function display(file) {
  return file?            write(file)
  :      /* otherwise */  show
}

function toJSON(data) {
  return JSON.stringify(data, null, 2)
}

function listLanguages() {
  return 'Available languages:\n\n'
       + '  Ext.\tDescription\n'
       + '  ----------------------------------------------------------\n'
       + keys(languages).map(function(k) {
           return '  ' + k + '\t' + languages[k].name
         }).join('\n')
}

function parseArgs(spec, options) {
  var _oldExit = process.exit
  var _oldLog  = console.log
  try {
    process.exit = function(){ throw new Error }
    console.log  = function(){ }

    return docopt(spec, options)
  } catch(e) {
    show(doc)
    die()
  } finally {
    process.exit = _oldExit
    console.log  = _oldLog
  }
}

void function main() {
  var args     = parseArgs(stripComments(doc), { help: false })
  var output   = display(args['--output'])
  var debug    = args['--debug']
  var file     = args['<file>']
  var language = args['--language']?  languages[args['--language']]
               :                      null
  var source   = args.compile || args.run?  core.resolveFile(file, language)
               : /* otherwise */            null

  ; args.repl?            core.repl(language, language.state(), debug)
  : args.run?             output(core.runProgram(source.code()
                                                ,source.state()
                                                ,source.filename
                                                ,debug
                                                ,source.language))
  : args.languages?       show(listLanguages())
  : args.exercise?        exercises.run(args['<file>'], debug).otherwise(die)
  : args.help?            show(doc)
  : args.version?         show('jsm version ' + pkg.version)
  : args['--ast']?        output(toJSON(source.ast()))
  : args['--json']?       output(toJSON(source.jsAst()))
  : args.compile?         output( core.loadPrelude(source.language) + ';\n' 
                                + source.code())
  :                       die(show(doc))
}()
