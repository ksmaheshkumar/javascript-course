#!/usr/bin/env node
// Copyright (c) 2014 Quildreen Motta <quildreen@gmail.com>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var doc = [ 'jsm â€” A minimal multi-layered subset of JS for teaching.'
          , ''
          , 'Usage:'
          , '  jsm repl --language=LANG'
          , '  jsm [options] <file>'
          , '  jsm -h | --help'
          , '  jsm -v | --version'
          , ''
          , 'Options:'
          , '  -l, --language=FILE  Uses language definitions from FILE.'
          , '  -c, --compile        Compiles the file.'
          , '  -a, --ast            Displays a JSON of the AST of a program.'
          , '  -o, --output=FILE    Outputs to FILE instead of stdout.'
          , '  -j, --json           Outputs JS AST as JSON.'
          , '  -h, --help           Displays this screen and exits.'
          , '  -v, --version        Displays the version number and exits.'
          ].join('\n')


var fs     = require('fs')
var docopt = require('docopt').docopt
var path   = require('path')
var pkg    = require('../package.json')
var core   = require('../lib/core')
var curry  = require('core.lambda').curry
var ometa  = require('ometajs')

var root   = path.resolve('.')

function read(filename) {
  return fs.readFileSync(filename, 'utf-8')
}

write = curry(write, 2)
function write(filename, data) {
  return fs.writeFileSync(filename, data, 'utf-8')
}

function die() {
  process.exit(1)
}

function display(file) {
  return file?            write(file)
  :      /* otherwise */  console.log.bind(console)
}

function toJSON(data) {
  return JSON.stringify(data, null, 2)
}

void function main() {
  var args     = docopt(doc, { version: pkg.version })
  var file     = args['<file>']
  var language = args['--language']? require(path.join(root, args['--language'])) : null
  var show     = display(args['--output'])
  var repl     = args['repl']
  var source   = !repl? core.resolveFile(file) : null

  ; repl?               core.repl(language, language.state())
  : args['--compile']?  show(source.code)
  : args['--ast']?      show(toJSON(source.ast))
  : args['--json']?     show(toJSON(source.jsAst))
  :                     die(show(doc))
}()
