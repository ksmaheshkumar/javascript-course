// (1)
// Tanto a operação de disjunção (||) quanto a operação de conjunção (&&)
// possuem um valor de identidade, de forma que a aplicação dessas operações
// a um argumento α e o valor de identidade sempre resultam em α.
//
// Por exemplo, para a operação de adição, o valor de identidade é 0
// visto que para qualquer número adicionado à 0, o resultado é o próprio
// número.

law identity_disjunction(x): ???
law identity_conjunction(x): ???


// (2)
// Ambas operações apresentam a propriedade de “aniquilação,” de forma que
// a aplicação dessas operações a um argumento α e o valor de “aniquilação,”
// ignoram o argumento α.
//
// Por exemplo, multiplicação exibe essa propriedade, visto que qualquer
// número multiplicado por 0 sempre resulta em 1.


// (3)
// A operação de negação obedece as leis de complemento de teoria de
// conjuntos, em combinação com as operações de disjunção e conjunção.
// Diferente das leis vistas acima, a negação permite que o resultado
// de uma expressão booleana mude de forma diferente do input (e.g.: para
// um input falso, a negação pode retornar verdadeiro).
//
// Altere as expressões a seguir de forma que a lei descrita se aplique:

// (4)
// Mostre como é possível expressar a operação de negação (!) através
// do operador condicional (?:)

