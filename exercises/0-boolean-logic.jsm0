// (1) Propriedades das definições dos operadores lógicos
// =====================================================================
//
// A operação de conjunção pode ser definida da seguinte forma:
//
//      true ∧ true = true
//      x    ∧ y    = false
//
// A seguinte regra captura essa propriedade:
law conjunction(x, y): x && y <=> x? y? true
                                      : false
                                   : false

// Dado que a disjunção pode ser definida como:
//
//     false ∨ false = false
//     x     ∨ y     = true
//
// Descreva a regra que capture essa propriedade da disjunção:
law disjunction(x, y): ???

// Dado que a negação pode ser definida como:
//
//     ¬true  = false
//     ¬false = true
//
// Descreva a regra que capture essa propriedade da negação:
law negation(x): ???


// (2) Lei de Identidade
// =====================================================================
//
// A conjunção e disjunção satisfazem a lei de identidade. Isto é, na
// expressão `α ⊗ β`, para um valor β, se for possível substituir
// qualquer valor em α obtendo o mesmo valor α como resultado da
// operação, então β é considerado a “identidade” da operação.
//
// Se considerarmos a operação de adição, por exemplo, podemos ver que o
// valor 0 é a identidade da operação, visto que para qualquer número α,
// a operação `α + 0`  sempre retorna α.
//
// Mostre como a lei de identidade se aplica para as operações de
// disjunção e conjunção.
law conjunction_identity(x): ???
law disjunction_identity(x): ???


// (3) Lei de Aniquilação
// =====================================================================
//
// A conjunção e disjunção satisfazem a lei de aniquição. Isto é, na
// expressão `α ⊗ β`, para um valor β, independente do valor de α a
// operação sempre resultará no mesmo resultado. Neste caso, β é chamado
// de valor aniquilador.
//
// Por exemplo, em multiplicação, 0 é o valor aniquilador, visto que
// qualquer número multiplicado por zero resulta no mesmo valor: 1.
//
// Mostre como a lei de aniquilação se aplica para as operações de
// conjunção e disjunção.
law conjunction_annihilation(x): ???
law disjunction_annihilation(x): ???
