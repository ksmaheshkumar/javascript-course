// Copyright (c) 2014 Quildreen Motta <quildreen@gmail.com>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
var parse              = require('esprima').parse
var extend             = require('xtend')
var path               = require('path')
var FunctionalCompiler = require('./Functional').Compiler
var FunctionalParser   = require('./Functional').Parser
var _                  = require('../lib/gen')
var runtime            = require('./runtime/core')

exports.name = 'Object Oriented'
exports.state = function() {
  return extend(runtime, {
    require: runtime.$require('.oo', path.join(__dirname, 'stdlib', 'oo'), '.')
  }) 
}

ometa Parser <: FunctionalParser {
  lambda = '(' ws listOf(#identifier, ','):as ws ')' ws "->" ws expr:b -> as.reduceRight(function(r, x) { return [#Lambda, x, r] }, b)
         | identifier:a ws "->" ws expr:b                              -> [#Lambda, a, b],
                               

  expr = expr:a ws "where" ws listOf(#assign, ","):bs "end" -> [#LetIn, bs, a]
       | keyword('ffi') ws string:a                         -> [#FFI, a]
       | matchExpr
       | condExpr,

  unExpr = '!' ws unExpr:a -> [#Not, a]
         | unExpr:a ws '.' ws identifier:b -> [#Member, a, b]
         | primExpr,

  primExpr = primExpr:a ws '#' ws identifier:b ws '(' ws listOf(#expr, ','):cs ws ')' -> (function(ref) {
               return [#App, [#Lambda, [#Id, ref], 
                               cs.reduce(function(r, x) { 
                                 return [#App, r, x] 
                               }, [#App, [#Member, [#Id, ref], b], [#Id, ref]])]
                             , a]
             }(FunctionalCompiler.freshName()))
           | primExpr:a ws '#' ws identifier:b                 -> [#App, [#Member, a, b], a]
           | primExpr:a ws '(' ws listOf(#expr, ','):bs ws ')' -> bs.reduce(function(x, b){ return [#App, x, b] }, a)
           | primExprHd,


  primExprHd = '(' ws expr:a ws ')' -> a
             | lambda
             | qualId
             | value,

  methodDecl = keyword('method') ws qualId:a ws '#' ws identifier:m ws '=' ws expr:e -> [#DefMeth, a, m, e]
             | keyword('method') ws qualId:a ws '#' ws identifier:m ws '(' ws listOf(#identifier, ','):cs ws ')' ws '=' ws expr:e -> [#DefMeth, a, m, cs.reduceRight(function(r, x) {
                                                                                                                                       return [#Lambda, x, r]
                                                                                                                                     }, e)],

  moduleDecl = keyword('module') (ws moduleStmt)*:as ws keyword('end')                                         -> [#SModule, as]
             | keyword('module') ws '(' listOf(#identifier, ','):bs ')' (ws moduleStmt)*:as ws keyword('end')  -> [#Module, bs, as],

  exportConstruct = keyword('export') ws identifier:a ws '=' ws expr:e           -> [#Export, a, e]
                  | keyword('export') ws identifier:a (ws ',' ws identifier)*:bs -> [#ExportAll, [a].concat(bs)],

  moduleStmt = exportConstruct
             | statement,

  statement = letConstruct
            | methodDecl
            | dataDecl
            | expr:a -> [#StmtEx, a],

  
  program = ws moduleDecl:a ws eof    -> [#Program, [a]]
          | (ws statement)*:xs ws eof -> [#Program, xs],
}

ometa Compiler <: FunctionalCompiler {
  DefMeth cc:a cc:m cc:e   -> _.expr(_.call(_.id('$defMethod'), [a, _.lit(m.name), e])),
  Module [cc*:as] [cc*:bs] -> _.expr(_.exportMod(_.module(as, bs))),
  SModule [cc*:bs]         -> _.expr(_.exportMod(_.call(_.module([], bs), []))),
  Export cc:a cc:b         -> _.expr(_.visible(a, b)),
  ExportAll [cc*:as]       -> _.block(as.map(function(a) {
                                return _.expr(_.visible(a, a))
                              })),
  FFI cc:a                 -> parse(a.value).body[0].expression

}


