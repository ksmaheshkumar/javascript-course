// Copyright (c) 2014 Quildreen Motta <quildreen@gmail.com>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
var BaseLanguage = require('./common/BaseLanguage').BaseLanguage
var _            = require('../lib/gen')

exports.name  = 'Boolean Logic'
exports.state = function() {
  return {}
}

ometa Parser <: BaseLanguage {
  value = keyword('true')     -> [#Lit, true]
        | keyword('false')    -> [#Lit, false]
        | bottom,

  expr = expr:a ws "?" ws expr:b ws ":" ws expr:c -> [#If, a, b, c]
       | expr:a ws "&&" ws expr:b                 -> [#And, a, b]
       | expr:a ws "||" ws expr:b                 -> [#Or, a, b]
       | "!" ws expr:a                            -> [#Not, a]
       | identifier
       | value,

  statement = letConstruct,

  program = (ws statement)*:xs ws eof -> [#Program, xs]
}

ometa Compiler {
  Let     cc:id cc:val   -> _.var(id, val),
  If      cc:a cc:b cc:c -> _.cond(a, b, c),
  And     cc:a cc:b      -> _.and(a, b),
  Or      cc:a cc:b      -> _.or(a, b),
  Not     cc:a           -> _.not(a),
  Lit     :a             -> _.lit(a),
  Id      :a             -> _.id(a),
  Program [cc*:xs]       -> _.program(xs),
  Bottom                 -> _.raise(_.error( _.id('Error')
                                           , 'Undefined expression.')),

  cc = [:t apply(t):a]   -> a
}
