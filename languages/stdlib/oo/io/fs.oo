module

  let fs = ffi "$node_require('fs')"
  let path = ffi "$node_require('path')"
  let future = require("std:data/future").future

  export readFile = filename -> future <| x ->
    ffi "fs.readFile(filename, 'utf-8', function(err, data) {
           if (err) x.failure(err)
           else     x.success(data)
         })"

  export exists = path -> future <| x ->
    ffi "fs.exists(path, x.success)"

  export writeFile = (filename, contents) -> future <| x ->
    ffi "fs.writeFile(filename, contents, 'utf-8', function(err) {
           if (err)  x.failure(err)
           else      x.success(unit)
         })"

  export listDirectory = filename -> future <| x ->
    ffi "fs.readdir(filename, function(err, data) {
           if (err)  x.failure(err)
           else      x.success($toList(data))
         })"

  export makeDirectory = (filename, mode) -> future <| x ->
    ffi "fs.mkdir(filename, mode, function(err) {
           if(err)  x.failure(err)
           else     x.success(unit)
         })"

  export remove = filename -> future <| x ->
    ffi "fs.stat(filename, function(stats) {
           if(stats.isDirectory())
             fs.rmdir(filename, function(err) {
               if(err)  x.failure(err)
               else     x.success(unit)
             })
           else
             fs.unlink(filename, function(err) {
               if(err)  x.failure(err)
               else     x.success(unit)
             })
         })"
  
  export joinPath = (a, b) -> ffi "path.join(a, b)"
  export dirname  = path.dirname
  export extname  = path.extname
  export basename = a -> ffi "path.basename(a, extname(a))"
  export pathSeparator = path.sep
  export pathDelimiter = path.delimiter

end
