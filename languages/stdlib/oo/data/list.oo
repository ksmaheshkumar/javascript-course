module

  let Maybe = require("std:data/maybe")

  export List = ffi "$List"
  let Nil  = List.Nil
  let Cons = List.Cons

  // ^-- the definition of the following sum type:
  //
  // data List = Nil
  //           | Cons(head, tail)
  // end
  //
  // ^--

  // -- Semigroup
  method List#concat(self, ys) = match self with
    | Nil         => ys
    | Cons(x, xs) => Cons(x, xs ++ ys)
  end
  
  // -- Monoid 
  method List#empty(self) = Nil

  // -- Functor
  method List#map(self, f) = match self with
    | Nil         => Nil
    | Cons(x, xs) => Cons(f(x), xs#map(f))
  end

  // -- Apply
  method List#ap(self, bs) = bs#map(b -> self#map(f -> f(b)))

  // -- Applicative
  method List#of(_, a) = Cons(a, Nil)

  // -- Chain / Monad
  method List#chain(self, f) = match self with
    | Nil         => Nil
    | Cons(x, xs) => f(x) ++ xs#chain(f)
  end

  // Returns the first item of the list.
  // head :: List<a> → Maybe<a>
  export first = xs -> match xs with
    | Nil        => Maybe.Nothing
    | Cons(a, _) => Maybe.Just(a)
  end

  // Returns the rest of the list.
  // rest :: List<a> → List<a>
  export rest = xs -> match xs with
    | Nil           => Nil
    | Cons(_, tail) => tail
  end

  // Filters items of a list.
  // filter :: (a → Boolean) → List<a> → List<a>
  export filter = (f, xs) -> match xs with
    | Nil         => Nil
    | Cons(x, ys) => f(x)?  Cons(x, filter(f, ys))
                         :  filter(f, ys)
  end

  // Takes the last item of a list.
  // last :: List<a> → Maybe<a>
  export last = xs -> match xs with
    | Nil         => Nothing
    | Cons(x, ys) => isEmpty(ys)?  Just(x)
                                :  last(ys)
  end

  // Checks if a list is empty.
  // isEmpty :: List<a> → Boolean
  export isEmpty = xs -> xs === Nil

  export foldl = (f, b, xs) -> ffi "(function $recur(z, xs) {
    if (xs === Nil) return z
    if (xs instanceof Cons) {
      return $recur(f(z)(xs.head), xs.tail)
    }
    throw new Error('No cases matched the value ' + xs)
  })(b, xs)
  "

  export foldr = (f, b, xs) -> foldl((ys,y) -> f(y,ys), b, reverse(xs))

  export reverse = foldl((xs, x) -> Cons(x, xs))(Nil)

  export length = foldl((n, _) -> n + 1)(0)

  export any = (f, xs) -> match xs with
    | Nil         => true
    | Cons(x, ys) => f(x)?  true
                         :  any(ys)
  end

  export all = (f, xs) -> match xs with
    | Nil         => false
    | Cons(x, ys) => f(x)?  all(ys)
                         :  false
  end


  export at = (n, xs) -> find((r, x) -> r._0 === 0? x
                                                  : { r._0 - 1, Maybe.Just(x) })._1
                         where
                           find = f -> foldl(f, { n, Maybe.Nothing }, xs)
                         end

  export zipWith = (f, xs, ys) -> match xs with
    | Nil           => Nil
    | Cons(x1, xs1) => match ys with
                         | Nil           => Nil
                         | Cons(y1, ys1) => Cons(f(x1, y1), zipWith(f, xs1, ys1))
                       end
  end

  export zip = zipWith((x, y) -> {x, y})

  export replicate = (n, x) -> n === 0? Cons(x, Nil)
                                      : Cons(x, replicate(n - 1, x))

  export sum = foldl((x, y) -> x + y)(0)

  export take = (n, xs) -> match xs with
    | Nil         => Nil
    | Cons(x, ys) => n === 0? Nil
                            : Cons(x, take(n - 1, ys))
  end

  export drop = (n, xs) -> match xs with
    | Nil         => Nil
    | Cons(x, ys) => n === 0? ys
                            : drop(n - 1, ys)
  end

  export find = (f, xs) -> match xs with
    | Nil         => Maybe.Nothing
    | Cons(x, ys) => f(x)?  Maybe.Just(x)
                         :  find(f, ys)
  end

end
