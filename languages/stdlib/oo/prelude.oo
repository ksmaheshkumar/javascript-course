let list       = require("std:data/list")
let List       = list.List
let Either     = require("std:data/either").Either
let Maybe      = require("std:data/maybe").Maybe
let Validation = require("std:data/validation").Validation
let _future    = require("std:data/future")
let Future     = _future.Future
let future     = _future.future


// Core sum types
data Ordering = LT | EQ | GT end

// Some lower level ffi stuff
let show = x -> ffi "x.toString.length === 1? x.toString(x) : x.toString()"

// Common functional operators
let identity = x -> x
let constant = x -> _ -> x
let apply    = (f, x) -> f(x)
let thread   = (x, f) -> f(x)
let flip     = (f, a, b) -> f(b, a)
let compose  = (f, g, a) -> f(g(a))


// Tuple operations
let first  = a -> a._0
let second = a -> a._1


// Record operations
let get = (m, a) -> ffi "a[m]"


// Operators as functions
let add    = ffi "$add"
let sub    = ffi "$sub"
let mul    = ffi "$mul"
let mod    = ffi "$mod"
let lt     = ffi "$lt"
let lte    = ffi "$lte"
let gt     = ffi "gt"
let gte    = ffi "gte"
let eq     = ffi "eq"
let neq    = ffi "neq"
let and    = (a, b) -> a && b
let or     = (a, b) -> a || b
let not    = a -> !a


// Category theory operators as functions
let concat = (xs, ys) -> xs ++ ys
let map    = (f, x) -> x#map(f)
let empty  = a -> a#empty
let ap     = (a, b) -> a <*> b
let of     = (a, b) -> a#of(b)
let chain  = (f, a) -> a >>= f


// Core IO routines
let _ref = require("std:io/core")

let print     = _ref.print
let printLine = _ref.printLine
let readLine  = _ref.readLine
let runIO     = _ref.runIO
let runIO_    = _ref.runIO_


// File system
let _ref = require("std:io/fs")

let readFile      = _ref.readFile
let exists        = _ref.exists
let writeFile     = _ref.writeFile
let listDirectory = _ref.listDirectory
let makeDirectory = _ref.makeDirectory
let remove        = _ref.remove
let joinPath      = _ref.joinPath
let dirname       = _ref.dirname
let extname       = _ref.extname
let basename      = _ref.basename


// HTTP
let _ref = require("std:io/net")

let request = _ref.request



// Monad abstractions
let _ref = require("std:control/monad")

let sequence = _ref.sequence
let mapM     = _ref.mapM
let flatten  = _ref.flatten
let liftM    = _ref.liftM
let liftM2   = _ref.liftM2
let liftM3   = _ref.liftM3





// Clean up
ffi "_ref = undefined"
