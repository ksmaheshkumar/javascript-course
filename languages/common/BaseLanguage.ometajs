// Copyright (c) 2014 Quildreen Motta <quildreen@gmail.com>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var _         = require('../../lib/gen')
var stringify = require('escodegen').generate

/**
 * A list of reserved names in the language.
 *
 * @summary [String]
 */
var reserved = [ 'function'
               , 'true'
               , 'false'
               , 'let'
               , 'law'
               , 'satisfies'
               ]

/**
 * True if some name is reserved by the language.
 *
 * @summary String â†’ Boolean
 */
function isReserved(a) {
  return reserved.indexOf(a) !== -1
}

ometa BaseLanguage {
  space   = ^space | fromTo('//', '\n'),
  ws      = space*,
  spaces  = space*,
  eol     = '\n' | '\r',
  eof     = ?(this._offset >= this._source.length),

  // Identifiers
  idStart    = letter,
  idRest     = letter | digit | '_',
  identifier = ws <idStart idRest*>:a ?(!isReserved(a)) -> [#Id, a],

  letterOrDigit = letter | digit,
  keyword :xs   = seq(xs) ~letterOrDigit  -> xs,

  bottom = "???" -> [#Bottom],

  // Values
  digits = digit+:as -> Number(as.join('')),
  number = digits:a ('.' digits:b)? -> [#Lit, Number(a + '.' + (b || 0))],

  stringEscape = token('\\"'),
  stringChar   = (stringEscape | (~seq('"') char)):a -> a,
  string       = '"' <stringChar*>:as '"'            -> [#Lit, as],

  vector = '[' ws expr:hd (ws ',' ws expr)*:tl ws ']' -> [#Vector, [hd].concat(tl)],
         | '[' ws expr:hd ws ']'                      -> [#Vector, [hd]],
         | '[' ws ']'                                 -> [#Vector, []],

  // Statements
  letConstruct = keyword('let') ws identifier:a ws '=' ws expr:b -> [#Let, a, b],
  program      = (ws statement)*:xs ws eof -> [#Program, xs],

  // Testing constructs
  testStmt     = lawConstruct | statement,
  testProgram  = (ws testStmt)*:xs ws eof -> [#Program, xs],

  lawConstruct = keyword('law') ws identifier:a ws lawArgs:bs ws ':' ws lawBody:c  -> [#Law, a, bs, c],
  lawBody      = bottom
               | expr:a ws "<=>" ws expr:b                                         -> [#Equiv, a, b],
  lawArgs      = '(' ws listOf(#identifier, ','):xs ws ')'                         -> xs
}

ometa BaseCompiler {
  Law cc:id [cc*:args] cc:ex -> _.var(id, _.fn(id, args, _.block([_.return(ex)]), {})),
  Equiv cc:a cc:b            -> _.call(_.id('$equiv'), [a, b, _.lit(stringify(a) + ' = ' + stringify(b))]),
  Bottom                     -> _.raise(_.error( _.id('Error')
                                            , 'Not implemented.')),
  Program [cc*:xs]           -> _.program(xs),

  cc = [:t apply(t):a] -> a
}
